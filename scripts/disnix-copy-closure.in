#!/bin/bash
set -e
set -o pipefail

# Disnix - A Nix-based distributed service deployment tool
# Copyright (C) 2008-2017  Sander van der Burg
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

# Shows the usage of this command to the user

showUsage()
{
    cat <<EOF
Usage: $0 [OPTION] --to --target TARGET paths
  or: $0 [OPTION] --from --target TARGET paths

The command \`disnix-copy-closure' copies a Nix store component and all its
intra-dependencies to or from a given target machine through a Disnix
interface. This process is very efficient, because it scans for all
intra-dependencies and only copies the missing parts.

This command is very similar to the \`nix-copy-closure' command, except that it
uses a Disnix interface for transport (which optionally uses SSH or a custom
protocol) instead of using SSH directly.

Options:
      --to                   Copy closure to the given target
      --from                 Copy closure from the given target
  -t, --target=TARGET        Address of the Disnix service running on the remote
                             machine
      --interface=INTERFACE  Path to executable that communicates with a Disnix
                             interface. Defaults to: disnix-ssh-client
  -h, --help                 Shows the usage of this command to the user
  -v, --version              Shows the version of this command to the user

Environment:

  DISNIX_CLIENT_INTERFACE    Sets the client interface (which defaults to:
                             disnix-ssh-client)
  DISNIX_IMPORT_SUDO         If "true", run "nix-store --import" via sudo to avoid
                             signature issues.
EOF
}

# Shows the version of this command to the user

showVersion()
{
    cat <<EOF
$0 (@PACKAGE_NAME@ @PACKAGE_VERSION@)

Copyright (C) 2008-2017 Sander van der Burg
EOF
}

# Parse valid argument options

PARAMS=`@getopt@ -n $0 -o t:hv -l to,from,target:,interface:,help,version -- "$@"`

if [ $? != 0 ]
then
    showUsage
    exit 1
fi

# Evaluate valid options

eval set -- "$PARAMS"

while [ "$1" != "--" ]
do
    case "$1" in
        --to)
            to=1
            ;;
        --from)
            from=1
            ;;
        -t|--target)
            target=$2
            ;;
        --interface)
            interface=$2
            ;;
        -h|--help)
            showUsage
            exit 0
            ;;
        -v|--version)
            showVersion
            exit 0
    esac
    
    shift
done

# Shift to get all non-option parameters reflecting Nix store paths
shift

# Autoconf settings
export prefix=@prefix@

# Import checks
source @datadir@/@PACKAGE@/checks

# Validate the given options

if [ ! "$to" = "1" ] && [ ! "$from" = "1" ]
then
    echo "ERROR: Either the --from or --to option has to be used!" >&2
    exit 1
fi

checkTarget
checkClientInterface

if [ "$@" = "" ]
then
    echo "ERROR: At least one Nix store path must be specified!" >&2
    exit 1
fi

checkTmpDir

# Execute operation

if [ "$to" = "1" ]
then
    # Resolve the store path of the given file
    storePath=`nix-store --query --resolve $@`

    # Query the requisites of the given component
    requisites=`nix-store --query --requisites --include-outputs $storePath`

    # Invoke a remote Disnix interface to fetch all the paths that 
    # are not already at the remote machine
    mapfile -t batches <<<$(tr '\n' ' ' <<< $requisites | fold -sw 130000)  # Prevent "argument list too long"
    for batch in "${batches[@]}"; do
        invalidPaths="$invalidPaths $($interface --target $target --print-invalid $batch)"
    done

    if [[ ! "$invalidPaths" =~ ^[[:space:]]*$ ]]
    then
        # Serialise all the missing parts of the closure
        tmpfilename=`mktemp -p $TMPDIR`
        nix-store --export $invalidPaths > $tmpfilename
    
        # Import the serialisation of the target by using the Disnix interface
        # on the remote machine
        $interface --target $target --import --localfile $tmpfilename || (rm -f $tmpfilename; false)
    
        # Remove the serialisation
        rm -f $tmpfilename
    fi
else
    # Query the requisites of the given component
    requisites=`$interface --target $target --query-requisites $@`
    
    # Query all the invalid paths on this machine
    invalidPaths=`nix-store --check-validity --print-invalid $requisites`
    
    if [ "$invalidPaths" != "" ]
    then
        # Export the closure all the invalid paths
        closure=`$interface --target $target --export --remotefile $invalidPaths`

        if [ "$DISNIX_IMPORT_SUDO" == "true" ]; then
            nixStoreCmd="sudo nix-store"
        else
            nixStoreCmd="nix-store"
        fi

        # Import the closure
        cat $closure | $nixStoreCmd --import || (rm -f $closure; false)

        # Remove the serialisation
        rm -f $closure
    fi
fi
